import com.mysql.cj.exceptions.ConnectionIsClosedException;

import java.sql.*;
import java.util.Scanner;

public class HotelReservationSystem {
    private static final String url="jdbc:mysql://localhost:3306/hotel_db";
    private static final String username="root";
    private static final String password="Jay@2003";
    public static void main(String[]args) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println(e.getMessage());
        }
        try {
            Connection connection = DriverManager.getConnection(url, username, password);
            Statement statement=connection.createStatement();
            while (true) {
                System.out.println("HOTEL MANAGEMENT SYSTEM ");
                Scanner scanner = new Scanner(System.in);
                System.out.println("1. Reserver a room ");
                System.out.println("2. View Reservations");
                System.out.println("3. Get Room Number");
                System.out.println("4. Update Reservations");
                System.out.println("5. Delete Reservation ");
                System.out.println("0. Exit");
                System.out.println("Choose an option: ");
                int choice = scanner.nextInt();
                switch (choice) {
                    case 1:
                        reserveRoom(connection, scanner,statement);
                        break;
                    case 2:
                        viewReservation(connection,statement);
                        break;
                    case 3:
                        getRoomNumber(connection, scanner,statement);
                        break;
                    case 4:
                        updateReservation(connection, scanner,statement);
                        break;
                    case 5:
                        deleteReservation(connection, scanner,statement);
                        break;
                    case 0:
                        exit();
                        scanner.close();
                        return;
                    default:
                        System.out.println("invalid choice please try again ");

                }

            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

        private static void reserveRoom(Connection connection,Scanner scanner,Statement statement){
        try{
            System.out.println("enter the guest name : ");
            String guestName=scanner.next();
            scanner.nextLine();
            System.out.println("Enter room number : ");
            int roomNumber=scanner.nextInt();
            System.out.println("enter the contact number : ");
            String contactNumber=scanner.next();

            String sql="INSERT INTEO reservation (guest_name,room_number,contact_number)"+
                    "VALUES('"+guestName+"',"+roomNumber+",'"+contactNumber+"')";

                int affectedRows= statement.executeUpdate(sql);

                if(affectedRows>0){
                    System.out.println("Reservation successful!!!");
                }else {
                    System.out.println("Reservation failed.");
                }

        }
        catch (SQLException E){
               E.getMessage();
        }

        }
        private static void viewReservation(Connection connection,Statement statement)throws  SQLException{
        String sql ="select * from reservation";
            ResultSet resultSet=statement.executeQuery(sql);
            System.out.println("Current Reservations:");
            
            System.out.println("| Reservation ID | Guest           | Room Number   | Contact Number      | Reservation Date        |");
          

            while (resultSet.next()) {
                int reservationId = resultSet.getInt("reservation_id");
                String guestName = resultSet.getString("guest_name");
                int roomNumber = resultSet.getInt("room_number");
                String contactNumber = resultSet.getString("contact_number");
                String reservationDate = resultSet.getTimestamp("reservation_date").toString();

                // Format and display the reservation data in a table-like format
                System.out.printf("| %-14d | %-15s | %-13d | %-20s | %-19s   |\n",
                        reservationId, guestName, roomNumber, contactNumber, reservationDate);
            }


            }

        private static void getRoomNumber(Connection connection,Scanner scanner,Statement statement) {
        try {
            System.out.println("enter the reservation id ");
            int reservationId = scanner.nextInt();
            System.out.println("Enter the guest name ");
            String guestName = scanner.next();
            String sql ="Select room_number From reservation "+
                    "where reservation_id = "+ reservationId +
                    "and guest_name ='"+guestName+"'";
            ResultSet resultSet=statement.executeQuery(sql);
            if(resultSet.next()){
                int roomNumber = resultSet.getInt("room_number");
                System.out.println("Room number for reservation ID "+ reservationId + "and Guest "+guestName+"is: "+roomNumber);
            }
            else {
                System.out.println("Reversation not found");
            }
        }catch (SQLException e){
            e.printStackTrace();
        }
        }
        private static void updateReservation(Connection connection,Scanner scanner,Statement statement){
        try {
            System.out.println("Enter reservation Id to update : ");
            int reservationId = scanner.nextInt();
            scanner.nextLine();
            if (!reservationExists(connection, reservationId)) {
                System.out.println("Reservation not found for the given ID.");
                return;
            }
            System.out.println("Enter new guest name: ");
            String newGuestName = scanner.nextLine();
            System.out.print("Enter new room number: ");
            int newRoomNumber = scanner.nextInt();
            System.out.print("Enter new contact number: ");
            String newContactNumber = scanner.next();

            String sql = "UPDATE reservations SET guest_name = '" + newGuestName + "', " +
                    "room_number = " + newRoomNumber + ", " +
                    "contact_number = '" + newContactNumber + "' " +
                    "WHERE reservation_id = " + reservationId;
            int affectedRows = statement.executeUpdate(sql);

            if (affectedRows > 0) {
                System.out.println("Reservation updated successfully!");
            } else {
                System.out.println("Reservation update failed.");
            }

        }catch (SQLException e){
            e.printStackTrace();
        }


        }
    private static void deleteReservation(Connection connection, Scanner scanner,Statement statement) {
        try {
            System.out.print("Enter reservation ID to delete: ");
            int reservationId = scanner.nextInt();

            if (!reservationExists(connection, reservationId)) {
                System.out.println("Reservation not found for the given ID.");
                return;
            }

            String sql = "DELETE FROM reservations WHERE reservation_id = " + reservationId;


                int affectedRows = statement.executeUpdate(sql);

                if (affectedRows > 0) {
                    System.out.println("Reservation deleted successfully!");
                } else {
                    System.out.println("Reservation deletion failed.");

            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static boolean reservationExists(Connection connection, int reservationId) {
        try {
            String sql = "SELECT reservation_id FROM reservations WHERE reservation_id = " + reservationId;

            try (Statement statement = connection.createStatement();
                 ResultSet resultSet = statement.executeQuery(sql)) {

                return resultSet.next(); // If there's a result, the reservation exists
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false; // Handle database errors as needed
        }
    }


    public static void exit() throws InterruptedException {
        System.out.print("Exiting System");
        int i = 5;
        while(i!=0){
            System.out.print(".");
            Thread.sleep(1000);
            i--;
        }
        System.out.println();
        System.out.println("ThankYou For Using Hotel Reservation System!!!");
    }




        }




